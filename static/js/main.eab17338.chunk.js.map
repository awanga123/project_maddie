{"version":3,"sources":["BackArrow.js","NextArrow.js","App.js","serviceWorker.js","index.js"],"names":["BackArrow","props","onClick","previousImage","style","fontSize","marginRight","className","color","aria-hidden","NextArrow","nextImage","marginLeft","App","state","photos","slideCount","bind","this","fetchPhotos","length","setState","request","get","then","res","body","data","display","alignItems","justifyContent","marginTop","map","photo","key","indexOf","src","images","standard_resolution","url","width","height","alt","id","margin","fontFamily","caption","text","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eab17338.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function BackArrow(props) {\n  return (\n    <div onClick={props.previousImage} style={{fontSize: '5em', marginRight: '12px'}}>\n      <i className=\"fa fa-caret-left fa-2x\" style= {{color: '#282c34' }} aria-hidden=\"true\"></i>\n    </div>\n  )\n}","import React from 'react';\n\nexport default function NextArrow(props) {\n  return (\n    <div onClick={props.nextImage} style={{fontSize: '5em', marginLeft: '12px'}}>\n      <i className=\"fa fa-caret-right fa-2x\" style= {{color: '#282c34' }} aria-hidden=\"true\"></i>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport request from 'superagent';\n// import logo from './logo.svg';\nimport BackArrow from './BackArrow';\nimport NextArrow from './NextArrow';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photos: [],\n      slideCount: 0\n    }\n    this.nextImage = this.nextImage.bind(this);\n    this.previousImage = this.previousImage.bind(this);\n  }\n\n  componentWillMount() {\n    this.fetchPhotos();\n  }\n\n  nextImage() {\n    if(this.state.slideCount === this.state.photos.length - 1) {\n      this.setState({ slideCount: 0 })\n    } else {\n      this.setState({ slideCount: this.state.slideCount + 1 })\n    }\n  }\n\n  previousImage() {\n    if(this.state.slideCount === 0) {\n      this.setState({ slideCount: this.state.photos.length - 1 })\n    } else {\n      this.setState({ slideCount: this.state.slideCount - 1 })\n    }\n  }\n\n  fetchPhotos() {\n    request\n      .get('https://api.instagram.com/v1/users/self/media/recent/?access_token=1959867651.1677ed0.1e3802e00f0b4c3ea7c6f674b4352abd')\n      .then((res) => {\n        this.setState({\n          photos: res.body.data,\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header >\n          <h1 className=\"App-header\">Project Maddie</h1>\n        </header>\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginTop: '30px' }}>\n          {<BackArrow previousImage={this.previousImage} />}\n          {this.state.photos.map((photo, key) => {\n            if (this.state.photos.indexOf(photo) === this.state.slideCount - 1 && this.state.slideCount !== 0) {\n              return (\n                  <img src={photo.images.standard_resolution.url} width=\"150\" height=\"150\" alt='' />\n              )\n            } else if (this.state.photos.indexOf(photo) === this.state.photos.length - 1 && this.state.slideCount === (0)) {\n              return (\n                  <img src={photo.images.standard_resolution.url} width=\"150\" height=\"150\" alt='' />\n              )\n            }\n            return ''\n          })}          {this.state.photos.map((photo, key) => {\n            if (this.state.photos.indexOf(photo) === this.state.slideCount) {\n              return (\n                <div key={photo.id} style={{ margin: '0 auto' }}>\n                  <img src={photo.images.standard_resolution.url} alt='' />\n                  <div style={{ width: '600px',margin: '24px auto',fontSize: 30 , fontFamily: \"Bitter\"}}>\n                    {photo.caption !== null ? photo.caption.text : ''}\n                  </div>\n                </div>\n              )\n            }\n            return ''\n          })}\n          {this.state.photos.map((photo, key) => {\n            if (this.state.photos.indexOf(photo) === this.state.slideCount + 1 && this.state.slideCount !== (this.state.photos.length - 1)) {\n              return (\n                  <img src={photo.images.standard_resolution.url} width=\"150\" height=\"150\" alt='' />\n              )\n            } else if (this.state.photos.indexOf(photo) === 0 && this.state.slideCount === (this.state.photos.length -1)) {\n              return (\n                  <img src={photo.images.standard_resolution.url} width=\"150\" height=\"150\" alt='' />\n              )\n            }\n            return ''\n          })}\n          {<NextArrow nextImage={this.nextImage} />} \n        </div>\n        <footer>\n          <h1 className=\"App-footer\">{this.state.slideCount + \"/\" + (this.state.photos.length - 1)}</h1>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}